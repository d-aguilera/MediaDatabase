//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MediaDatabase.Database.Entities
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    internal partial class MediaDatabaseContext : DbContext
    {
        public MediaDatabaseContext()
            : base("name=MediaDatabaseContext")
        {
            this.Configuration.LazyLoadingEnabled = false;
            MediaTypes = Set<MediaType>();
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ContentFile> ContentFiles { get; set; }
        public virtual DbSet<Content> Contents { get; set; }
        public virtual DbSet<IgnoredFolder> IgnoredFolders { get; set; }
        public virtual DbSet<Medium> Media { get; set; }
        internal virtual DbSet<MediaType> MediaTypes { get; set; }
        public virtual DbSet<Partition> Partitions { get; set; }
        public virtual DbSet<ScanRequest> ScanRequests { get; set; }
        public virtual DbSet<Volume> Volumes { get; set; }
    
        public virtual ObjectResult<Nullable<int>> spDequeueScanRequest()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spDequeueScanRequest");
        }
    
        public virtual int spEnsureVolume(string mediumCaption, Nullable<long> mediumSize, string mediumSerialNumber, string mediumTypeName, string partitionCaption, Nullable<int> partitionDiskIndex, Nullable<int> partitionIndex, string volumeCaption, string volumeFileSystem, string volumeName, string volumeSerialNumber, ObjectParameter volumeId)
        {
            var mediumCaptionParameter = mediumCaption != null ?
                new ObjectParameter("MediumCaption", mediumCaption) :
                new ObjectParameter("MediumCaption", typeof(string));
    
            var mediumSizeParameter = mediumSize.HasValue ?
                new ObjectParameter("MediumSize", mediumSize) :
                new ObjectParameter("MediumSize", typeof(long));
    
            var mediumSerialNumberParameter = mediumSerialNumber != null ?
                new ObjectParameter("MediumSerialNumber", mediumSerialNumber) :
                new ObjectParameter("MediumSerialNumber", typeof(string));
    
            var mediumTypeNameParameter = mediumTypeName != null ?
                new ObjectParameter("MediumTypeName", mediumTypeName) :
                new ObjectParameter("MediumTypeName", typeof(string));
    
            var partitionCaptionParameter = partitionCaption != null ?
                new ObjectParameter("PartitionCaption", partitionCaption) :
                new ObjectParameter("PartitionCaption", typeof(string));
    
            var partitionDiskIndexParameter = partitionDiskIndex.HasValue ?
                new ObjectParameter("PartitionDiskIndex", partitionDiskIndex) :
                new ObjectParameter("PartitionDiskIndex", typeof(int));
    
            var partitionIndexParameter = partitionIndex.HasValue ?
                new ObjectParameter("PartitionIndex", partitionIndex) :
                new ObjectParameter("PartitionIndex", typeof(int));
    
            var volumeCaptionParameter = volumeCaption != null ?
                new ObjectParameter("VolumeCaption", volumeCaption) :
                new ObjectParameter("VolumeCaption", typeof(string));
    
            var volumeFileSystemParameter = volumeFileSystem != null ?
                new ObjectParameter("VolumeFileSystem", volumeFileSystem) :
                new ObjectParameter("VolumeFileSystem", typeof(string));
    
            var volumeNameParameter = volumeName != null ?
                new ObjectParameter("VolumeName", volumeName) :
                new ObjectParameter("VolumeName", typeof(string));
    
            var volumeSerialNumberParameter = volumeSerialNumber != null ?
                new ObjectParameter("VolumeSerialNumber", volumeSerialNumber) :
                new ObjectParameter("VolumeSerialNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spEnsureVolume", mediumCaptionParameter, mediumSizeParameter, mediumSerialNumberParameter, mediumTypeNameParameter, partitionCaptionParameter, partitionDiskIndexParameter, partitionIndexParameter, volumeCaptionParameter, volumeFileSystemParameter, volumeNameParameter, volumeSerialNumberParameter, volumeId);
        }
    
        public virtual int spPurgeContentFiles(Nullable<int> volumeId, string path, Nullable<System.DateTimeOffset> lastUpdatedBefore)
        {
            var volumeIdParameter = volumeId.HasValue ?
                new ObjectParameter("VolumeId", volumeId) :
                new ObjectParameter("VolumeId", typeof(int));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var lastUpdatedBeforeParameter = lastUpdatedBefore.HasValue ?
                new ObjectParameter("LastUpdatedBefore", lastUpdatedBefore) :
                new ObjectParameter("LastUpdatedBefore", typeof(System.DateTimeOffset));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPurgeContentFiles", volumeIdParameter, pathParameter, lastUpdatedBeforeParameter);
        }
    }
}
